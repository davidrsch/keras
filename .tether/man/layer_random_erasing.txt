Help on class RandomErasing in module keras.src.layers.preprocessing.image_preprocessing.random_erasing:

class RandomErasing(keras.src.layers.preprocessing.image_preprocessing.base_image_preprocessing_layer.BaseImagePreprocessingLayer)
 |  RandomErasing(factor=1.0, scale=(0.02, 0.33), fill_value=None, value_range=(0, 255), seed=None, data_format=None, **kwargs)
 |
 |  Random Erasing data augmentation technique.
 |
 |  Random Erasing is a data augmentation method where random patches of
 |  an image are erased (replaced by a constant value or noise)
 |  during training to improve generalization.
 |
 |  Args:
 |      factor: A single float or a tuple of two floats.
 |          `factor` controls the probability of applying the transformation.
 |          - `factor=0.0` ensures no erasing is applied.
 |          - `factor=1.0` means erasing is always applied.
 |          - If a tuple `(min, max)` is provided, a probability value
 |            is sampled between `min` and `max` for each image.
 |          - If a single float is provided, a probability is sampled
 |            between `0.0` and the given float.
 |          Default is 1.0.
 |      scale: A tuple of two floats representing the aspect ratio range of
 |          the erased patch. This defines the width-to-height ratio of
 |          the patch to be erased. It can help control the rw shape of
 |          the erased region. Default is (0.02, 0.33).
 |      fill_value: A value to fill the erased region with. This can be set to
 |          a constant value or `None` to sample a random value
 |          from a normal distribution. Default is `None`.
 |      value_range: the range of values the incoming images will have.
 |          Represented as a two-number tuple written `[low, high]`. This is
 |          typically either `[0, 1]` or `[0, 255]` depending on how your
 |          preprocessing pipeline is set up.
 |      seed: Integer. Used to create a random seed.
 |
 |  References:
 |     - [Random Erasing paper](https://arxiv.org/abs/1708.04896).
 |
 |  Method resolution order:
 |      RandomErasing
 |      keras.src.layers.preprocessing.image_preprocessing.base_image_preprocessing_layer.BaseImagePreprocessingLayer
 |      keras.src.layers.preprocessing.tf_data_layer.TFDataLayer
 |      keras.src.layers.layer.Layer
 |      keras.src.backend.tensorflow.layer.TFLayer
 |      keras.src.backend.tensorflow.trackable.KerasAutoTrackable
 |      tensorflow.python.trackable.autotrackable.AutoTrackable
 |      tensorflow.python.trackable.base.Trackable
 |      keras.src.ops.operation.Operation
 |      keras.src.saving.keras_saveable.KerasSaveable
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(
 |    self,
 |    factor=1.0,
 |    scale=(0.02, 0.33),
 |    fill_value=None,
 |    value_range=(0, 255),
 |    seed=None,
 |    data_format=None,
 |    **kwargs
 |  )
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  compute_output_shape(self, input_shape)
 |
 |  get_config(self)
 |      Returns the config of the object.
 |
 |      An object config is a Python dictionary (serializable)
 |      containing the information needed to re-instantiate it.
 |
 |  get_random_transformation(
 |    self,
 |    data,
 |    training=True,
 |    seed=None
 |  )
 |
 |  transform_bounding_boxes(
 |    self,
 |    bounding_boxes,
 |    transformation,
 |    training=True
 |  )
 |
 |  transform_images(
 |    self,
 |    images,
 |    transformation=None,
 |    training=True
 |  )
 |
 |  transform_labels(
 |    self,
 |    labels,
 |    transformation,
 |    training=True
 |  )
 |
 |  transform_segmentation_masks(
 |    self,
 |    segmentation_masks,
 |    transformation,
 |    training=True
 |  )
 |

