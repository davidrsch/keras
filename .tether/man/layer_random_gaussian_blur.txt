Help on class RandomGaussianBlur in module keras.src.layers.preprocessing.image_preprocessing.random_gaussian_blur:

class RandomGaussianBlur(keras.src.layers.preprocessing.image_preprocessing.base_image_preprocessing_layer.BaseImagePreprocessingLayer)
 |  RandomGaussianBlur(factor=1.0, kernel_size=3, sigma=1.0, value_range=(0, 255), data_format=None, seed=None, **kwargs)
 |
 |  Applies random Gaussian blur to images for data augmentation.
 |
 |  This layer performs a Gaussian blur operation on input images with a
 |  randomly selected degree of blurring, controlled by the `factor` and
 |  `sigma` arguments.
 |
 |  Args:
 |      factor: A single float or a tuple of two floats.
 |          `factor` controls the extent to which the image hue is impacted.
 |          `factor=0.0` makes this layer perform a no-op operation,
 |          while a value of `1.0` performs the most aggressive
 |          blurring available. If a tuple is used, a `factor` is
 |          sampled between the two values for every image augmented. If a
 |          single float is used, a value between `0.0` and the passed float is
 |          sampled. Default is 1.0.
 |      kernel_size: Integer. Size of the Gaussian kernel used for blurring.
 |          Must be an odd integer. Default is 3.
 |      sigma: Float or tuple of two floats. Standard deviation of the Gaussian
 |          kernel. Controls the intensity of the blur. If a tuple is provided,
 |          a value is sampled between the two for each image. Default is 1.0.
 |      value_range: the range of values the incoming images will have.
 |          Represented as a two-number tuple written `[low, high]`. This is
 |          typically either `[0, 1]` or `[0, 255]` depending on how your
 |          preprocessing pipeline is set up.
 |      seed: Integer. Used to create a random seed.
 |
 |  Method resolution order:
 |      RandomGaussianBlur
 |      keras.src.layers.preprocessing.image_preprocessing.base_image_preprocessing_layer.BaseImagePreprocessingLayer
 |      keras.src.layers.preprocessing.tf_data_layer.TFDataLayer
 |      keras.src.layers.layer.Layer
 |      keras.src.backend.tensorflow.layer.TFLayer
 |      keras.src.backend.tensorflow.trackable.KerasAutoTrackable
 |      tensorflow.python.trackable.autotrackable.AutoTrackable
 |      tensorflow.python.trackable.base.Trackable
 |      keras.src.ops.operation.Operation
 |      keras.src.saving.keras_saveable.KerasSaveable
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(
 |    self,
 |    factor=1.0,
 |    kernel_size=3,
 |    sigma=1.0,
 |    value_range=(0, 255),
 |    data_format=None,
 |    seed=None,
 |    **kwargs
 |  )
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  compute_output_shape(self, input_shape)
 |
 |  get_config(self)
 |      Returns the config of the object.
 |
 |      An object config is a Python dictionary (serializable)
 |      containing the information needed to re-instantiate it.
 |
 |  get_random_transformation(
 |    self,
 |    data,
 |    training=True,
 |    seed=None
 |  )
 |
 |  transform_bounding_boxes(
 |    self,
 |    bounding_boxes,
 |    transformation,
 |    training=True
 |  )
 |
 |  transform_images(
 |    self,
 |    images,
 |    transformation=None,
 |    training=True
 |  )
 |
 |  transform_labels(
 |    self,
 |    labels,
 |    transformation,
 |    training=True
 |  )
 |
 |  transform_segmentation_masks(
 |    self,
 |    segmentation_masks,
 |    transformation,
 |    training=True
 |  )
 |

