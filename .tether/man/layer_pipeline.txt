Help on class Pipeline in module keras.src.layers.preprocessing.pipeline:

class Pipeline(keras.src.layers.layer.Layer)
 |  Pipeline(layers, name=None)
 |
 |  Applies a series of layers to an input.
 |
 |  This class is useful to build a preprocessing pipeline,
 |  in particular an image data augmentation pipeline.
 |  Compared to a `Sequential` model, `Pipeline` features
 |  a few important differences:
 |
 |  - It's not a `Model`, just a plain layer.
 |  - When the layers in the pipeline are compatible
 |      with `tf.data`, the pipeline will also
 |      remain `tf.data` compatible. That is to say,
 |      the pipeline will not attempt to convert
 |      its inputs to backend-native tensors
 |      when in a tf.data context (unlike a `Sequential`
 |      model).
 |
 |  Example:
 |
 |  ```python
 |  from keras import layers
 |  preprocessing_pipeline = layers.Pipeline([
 |      layers.AutoContrast(),
 |      layers.RandomZoom(0.2),
 |      layers.RandomRotation(0.2),
 |  ])
 |
 |  # `ds` is a tf.data.Dataset
 |  preprocessed_ds = ds.map(
 |      preprocessing_pipeline,
 |      num_parallel_calls=4,
 |  )
 |  ```
 |
 |  Method resolution order:
 |      Pipeline
 |      keras.src.layers.layer.Layer
 |      keras.src.backend.tensorflow.layer.TFLayer
 |      keras.src.backend.tensorflow.trackable.KerasAutoTrackable
 |      tensorflow.python.trackable.autotrackable.AutoTrackable
 |      tensorflow.python.trackable.base.Trackable
 |      keras.src.ops.operation.Operation
 |      keras.src.saving.keras_saveable.KerasSaveable
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(
 |    self,
 |    layers,
 |    name=None
 |  )
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  call(
 |    self,
 |    inputs,
 |    training=True,
 |    mask=None
 |  )
 |
 |  get_config(self)
 |      Returns the config of the object.
 |
 |      An object config is a Python dictionary (serializable)
 |      containing the information needed to re-instantiate it.
 |
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |
 |  from_config(config)
 |      Creates an operation from its config.
 |
 |      This method is the reverse of `get_config`, capable of instantiating the
 |      same operation from the config dictionary.
 |
 |      Note: If you override this method, you might receive a serialized dtype
 |      config, which is a `dict`. You can deserialize it as follows:
 |
 |      ```python
 |      if "dtype" in config and isinstance(config["dtype"], dict):
 |          policy = dtype_policies.deserialize(config["dtype"])
 |      ```
 |
 |      Args:
 |          config: A Python dictionary, typically the output of `get_config`.
 |
 |      Returns:
 |          An operation instance.
 |
 |  ----------------------------------------------------------------------
 |  Readonly properties defined here:
 |
 |  layers
 |

