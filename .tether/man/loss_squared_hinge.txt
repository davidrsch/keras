Help on class SquaredHinge in module keras.src.losses.losses:

class SquaredHinge(LossFunctionWrapper)
 |  SquaredHinge(reduction='sum_over_batch_size', name='squared_hinge', dtype=None)
 |
 |  Computes the squared hinge loss between `y_true` & `y_pred`.
 |
 |  Formula:
 |
 |  ```python
 |  loss = square(maximum(1 - y_true * y_pred, 0))
 |  ```
 |
 |  `y_true` values are expected to be -1 or 1. If binary (0 or 1) labels are
 |  provided we will convert them to -1 or 1.
 |
 |  Args:
 |      reduction: Type of reduction to apply to the loss. In almost all cases
 |          this should be `"sum_over_batch_size"`. Supported options are
 |          `"sum"`, `"sum_over_batch_size"`, `"mean"`,
 |          `"mean_with_sample_weight"` or `None`. `"sum"` sums the loss,
 |          `"sum_over_batch_size"` and `"mean"` sum the loss and divide by the
 |          sample size, and `"mean_with_sample_weight"` sums the loss and
 |          divides by the sum of the sample weights. `"none"` and `None`
 |          perform no aggregation. Defaults to `"sum_over_batch_size"`.
 |      name: Optional name for the loss instance.
 |      dtype: The dtype of the loss's computations. Defaults to `None`, which
 |          means using `keras.backend.floatx()`. `keras.backend.floatx()` is a
 |          `"float32"` unless set to different value
 |          (via `keras.backend.set_floatx()`). If a `keras.DTypePolicy` is
 |          provided, then the `compute_dtype` will be utilized.
 |
 |  Method resolution order:
 |      SquaredHinge
 |      LossFunctionWrapper
 |      keras.src.losses.loss.Loss
 |      keras.src.saving.keras_saveable.KerasSaveable
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(
 |    self,
 |    reduction='sum_over_batch_size',
 |    name='squared_hinge',
 |    dtype=None
 |  )
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  get_config(self)
 |

