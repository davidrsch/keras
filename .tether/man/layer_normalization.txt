Help on class Normalization in module keras.src.layers.preprocessing.normalization:

class Normalization(keras.src.layers.layer.Layer)
 |  Normalization(axis=-1, mean=None, variance=None, invert=False, **kwargs)
 |
 |  A preprocessing layer that normalizes continuous features.
 |
 |  This layer will shift and scale inputs into a distribution centered around
 |  0 with standard deviation 1. It accomplishes this by precomputing the mean
 |  and variance of the data, and calling `(input - mean) / sqrt(var)` at
 |  runtime.
 |
 |  The mean and variance values for the layer must be either supplied on
 |  construction or learned via `adapt()`. `adapt()` will compute the mean and
 |  variance of the data and store them as the layer's weights. `adapt()` should
 |  be called before `fit()`, `evaluate()`, or `predict()`.
 |
 |  Args:
 |      axis: Integer, tuple of integers, or None. The axis or axes that should
 |          have a separate mean and variance for each index in the shape.
 |          For example, if shape is `(None, 5)` and `axis=1`, the layer will
 |          track 5 separate mean and variance values for the last axis.
 |          If `axis` is set to `None`, the layer will normalize
 |          all elements in the input by a scalar mean and variance.
 |          When `-1`, the last axis of the input is assumed to be a
 |          feature dimension and is normalized per index.
 |          Note that in the specific case of batched scalar inputs where
 |          the only axis is the batch axis, the default will normalize
 |          each index in the batch separately.
 |          In this case, consider passing `axis=None`. Defaults to `-1`.
 |      mean: The mean value(s) to use during normalization. The passed value(s)
 |          will be broadcast to the shape of the kept axes above;
 |          if the value(s) cannot be broadcast, an error will be raised when
 |          this layer's `build()` method is called.
 |      variance: The variance value(s) to use during normalization. The passed
 |          value(s) will be broadcast to the shape of the kept axes above;
 |          if the value(s) cannot be broadcast, an error will be raised when
 |          this layer's `build()` method is called.
 |      invert: If `True`, this layer will apply the inverse transformation
 |          to its inputs: it would turn a normalized input back into its
 |          original form.
 |
 |  Examples:
 |
 |  Calculate a global mean and variance by analyzing the dataset in `adapt()`.
 |
 |  >>> adapt_data = np.array([1., 2., 3., 4., 5.], dtype='float32')
 |  >>> input_data = np.array([1., 2., 3.], dtype='float32')
 |  >>> layer = keras.layers.Normalization(axis=None)
 |  >>> layer.adapt(adapt_data)
 |  >>> layer(input_data)
 |  array([-1.4142135, -0.70710677, 0.], dtype=float32)
 |
 |  Calculate a mean and variance for each index on the last axis.
 |
 |  >>> adapt_data = np.array([[0., 7., 4.],
 |  ...                        [2., 9., 6.],
 |  ...                        [0., 7., 4.],
 |  ...                        [2., 9., 6.]], dtype='float32')
 |  >>> input_data = np.array([[0., 7., 4.]], dtype='float32')
 |  >>> layer = keras.layers.Normalization(axis=-1)
 |  >>> layer.adapt(adapt_data)
 |  >>> layer(input_data)
 |  array([-1., -1., -1.], dtype=float32)
 |
 |  Pass the mean and variance directly.
 |
 |  >>> input_data = np.array([[1.], [2.], [3.]], dtype='float32')
 |  >>> layer = keras.layers.Normalization(mean=3., variance=2.)
 |  >>> layer(input_data)
 |  array([[-1.4142135 ],
 |         [-0.70710677],
 |         [ 0.        ]], dtype=float32)
 |
 |  Use the layer to de-normalize inputs (after adapting the layer).
 |
 |  >>> adapt_data = np.array([[0., 7., 4.],
 |  ...                        [2., 9., 6.],
 |  ...                        [0., 7., 4.],
 |  ...                        [2., 9., 6.]], dtype='float32')
 |  >>> input_data = np.array([[1., 2., 3.]], dtype='float32')
 |  >>> layer = keras.layers.Normalization(axis=-1, invert=True)
 |  >>> layer.adapt(adapt_data)
 |  >>> layer(input_data)
 |  array([2., 10., 8.], dtype=float32)
 |
 |  Method resolution order:
 |      Normalization
 |      keras.src.layers.layer.Layer
 |      keras.src.backend.tensorflow.layer.TFLayer
 |      keras.src.backend.tensorflow.trackable.KerasAutoTrackable
 |      tensorflow.python.trackable.autotrackable.AutoTrackable
 |      tensorflow.python.trackable.base.Trackable
 |      keras.src.ops.operation.Operation
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(
 |    self,
 |    axis=-1,
 |    mean=None,
 |    variance=None,
 |    invert=False,
 |    **kwargs
 |  )
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  adapt(self, data)
 |      Computes the mean and variance of values in a dataset.
 |
 |      Calling `adapt()` on a `Normalization` layer is an alternative to
 |      passing in `mean` and `variance` arguments during layer construction. A
 |      `Normalization` layer should always either be adapted over a dataset or
 |      passed `mean` and `variance`.
 |
 |      During `adapt()`, the layer will compute a `mean` and `variance`
 |      separately for each position in each axis specified by the `axis`
 |      argument. To calculate a single `mean` and `variance` over the input
 |      data, simply pass `axis=None` to the layer.
 |
 |      Arg:
 |          data: The data to train on. It can be passed either as a
 |              `tf.data.Dataset`, as a NumPy array, or as a backend-native
 |              eager tensor.
 |              If a dataset, *it must be batched*. Keras will assume that the
 |              data is batched, and if that assumption doesn't hold, the mean
 |              and variance may be incorrectly computed.
 |
 |  build(self, input_shape)
 |
 |  build_from_config(self, config)
 |      Builds the layer's states with the supplied config dict.
 |
 |      By default, this method calls the `build(config["input_shape"])` method,
 |      which creates weights based on the layer's input shape in the supplied
 |      config. If your config contains other information needed to load the
 |      layer's state, you should override this method.
 |
 |      Args:
 |          config: Dict containing the input shape associated with this layer.
 |
 |  call(self, inputs)
 |
 |  compute_output_shape(self, input_shape)
 |
 |  finalize_state(self)
 |
 |  get_build_config(self)
 |      Returns a dictionary with the layer's input shape.
 |
 |      This method returns a config dict that can be used by
 |      `build_from_config(config)` to create all states (e.g. Variables and
 |      Lookup tables) needed by the layer.
 |
 |      By default, the config only contains the input shape that the layer
 |      was built with. If you're writing a custom layer that creates state in
 |      an unusual way, you should override this method to make sure this state
 |      is already created when Keras attempts to load its value upon model
 |      loading.
 |
 |      Returns:
 |          A dict containing the input shape associated with the layer.
 |
 |  get_config(self)
 |      Returns the config of the object.
 |
 |      An object config is a Python dictionary (serializable)
 |      containing the information needed to re-instantiate it.
 |
 |  load_own_variables(self, store)
 |      Loads the state of the layer.
 |
 |      You can override this method to take full control of how the state of
 |      the layer is loaded upon calling `keras.models.load_model()`.
 |
 |      Args:
 |          store: Dict from which the state of the model will be loaded.
 |

