Help on class Equalization in module keras.src.layers.preprocessing.image_preprocessing.equalization:

class Equalization(keras.src.layers.preprocessing.image_preprocessing.base_image_preprocessing_layer.BaseImagePreprocessingLayer)
 |  Equalization(value_range=(0, 255), bins=256, data_format=None, **kwargs)
 |
 |  Preprocessing layer for histogram equalization on image channels.
 |
 |  Histogram equalization is a technique to adjust image intensities to
 |  enhance contrast by effectively spreading out the most frequent
 |  intensity values. This layer applies equalization on a channel-wise
 |  basis, which can improve the visibility of details in images.
 |
 |  This layer works with both grayscale and color images, performing
 |  equalization independently on each color channel. At inference time,
 |  the equalization is consistently applied.
 |
 |  **Note:** This layer is safe to use inside a `tf.data` pipeline
 |  (independently of which backend you're using).
 |
 |  Args:
 |      value_range: Optional list/tuple of 2 floats specifying the lower
 |          and upper limits of the input data values. Defaults to `[0, 255]`.
 |          If the input image has been scaled, use the appropriate range
 |          (e.g., `[0.0, 1.0]`). The equalization will be scaled to this
 |          range, and output values will be clipped accordingly.
 |      bins: Integer specifying the number of histogram bins to use for
 |          equalization. Defaults to 256, which is suitable for 8-bit images.
 |          Larger values can provide more granular intensity redistribution.
 |
 |  Input shape:
 |      3D (unbatched) or 4D (batched) tensor with shape:
 |      `(..., height, width, channels)`, in `"channels_last"` format,
 |      or `(..., channels, height, width)`, in `"channels_first"` format.
 |
 |  Output shape:
 |      3D (unbatched) or 4D (batched) tensor with shape:
 |      `(..., target_height, target_width, channels)`,
 |      or `(..., channels, target_height, target_width)`,
 |      in `"channels_first"` format.
 |
 |  Example:
 |
 |  ```python
 |  # Create an equalization layer for standard 8-bit images
 |  equalizer = keras.layers.Equalization()
 |
 |  # An image with uneven intensity distribution
 |  image = [...] # your input image
 |
 |  # Apply histogram equalization
 |  equalized_image = equalizer(image)
 |
 |  # For images with custom value range
 |  custom_equalizer = keras.layers.Equalization(
 |      value_range=[0.0, 1.0],  # for normalized images
 |      bins=128  # fewer bins for more subtle equalization
 |  )
 |  custom_equalized = custom_equalizer(normalized_image)
 |  ```
 |
 |  Method resolution order:
 |      Equalization
 |      keras.src.layers.preprocessing.image_preprocessing.base_image_preprocessing_layer.BaseImagePreprocessingLayer
 |      keras.src.layers.preprocessing.tf_data_layer.TFDataLayer
 |      keras.src.layers.layer.Layer
 |      keras.src.backend.tensorflow.layer.TFLayer
 |      keras.src.backend.tensorflow.trackable.KerasAutoTrackable
 |      tensorflow.python.trackable.autotrackable.AutoTrackable
 |      tensorflow.python.trackable.base.Trackable
 |      keras.src.ops.operation.Operation
 |      keras.src.saving.keras_saveable.KerasSaveable
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(
 |    self,
 |    value_range=(0, 255),
 |    bins=256,
 |    data_format=None,
 |    **kwargs
 |  )
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  compute_output_shape(self, input_shape)
 |
 |  compute_output_spec(
 |    self,
 |    inputs,
 |    **kwargs
 |  )
 |
 |  get_config(self)
 |      Returns the config of the object.
 |
 |      An object config is a Python dictionary (serializable)
 |      containing the information needed to re-instantiate it.
 |
 |  transform_bounding_boxes(
 |    self,
 |    bounding_boxes,
 |    transformation,
 |    training=True
 |  )
 |
 |  transform_images(
 |    self,
 |    images,
 |    transformation,
 |    training=True
 |  )
 |
 |  transform_labels(
 |    self,
 |    labels,
 |    transformation,
 |    training=True
 |  )
 |
 |  transform_segmentation_masks(
 |    self,
 |    segmentation_masks,
 |    transformation,
 |    training=True
 |  )
 |

