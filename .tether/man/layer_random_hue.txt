Help on class RandomHue in module keras.src.layers.preprocessing.image_preprocessing.random_hue:

class RandomHue(keras.src.layers.preprocessing.image_preprocessing.base_image_preprocessing_layer.BaseImagePreprocessingLayer)
 |  RandomHue(factor, value_range=(0, 255), data_format=None, seed=None, **kwargs)
 |
 |  Randomly adjusts the hue on given images.
 |
 |  This layer will randomly increase/reduce the hue for the input RGB
 |  images.
 |
 |  The image hue is adjusted by converting the image(s) to HSV and rotating the
 |  hue channel (H) by delta. The image is then converted back to RGB.
 |
 |  Args:
 |      factor: A single float or a tuple of two floats.
 |          `factor` controls the extent to which the
 |          image hue is impacted. `factor=0.0` makes this layer perform a
 |          no-op operation, while a value of `1.0` performs the most aggressive
 |          contrast adjustment available. If a tuple is used, a `factor` is
 |          sampled between the two values for every image augmented. If a
 |          single float is used, a value between `0.0` and the passed float is
 |          sampled. In order to ensure the value is always the same, please
 |          pass a tuple with two identical floats: `(0.5, 0.5)`.
 |      value_range: the range of values the incoming images will have.
 |          Represented as a two-number tuple written `[low, high]`. This is
 |          typically either `[0, 1]` or `[0, 255]` depending on how your
 |          preprocessing pipeline is set up.
 |      seed: Integer. Used to create a random seed.
 |
 |  Example:
 |
 |  ```python
 |  (images, labels), _ = keras.datasets.cifar10.load_data()
 |  random_hue = keras.layers.RandomHue(factor=0.5, value_range=[0, 1])
 |  images = keras.ops.cast(images, "float32")
 |  augmented_images_batch = random_hue(images[:8])
 |  ```
 |
 |  Method resolution order:
 |      RandomHue
 |      keras.src.layers.preprocessing.image_preprocessing.base_image_preprocessing_layer.BaseImagePreprocessingLayer
 |      keras.src.layers.preprocessing.tf_data_layer.TFDataLayer
 |      keras.src.layers.layer.Layer
 |      keras.src.backend.tensorflow.layer.TFLayer
 |      keras.src.backend.tensorflow.trackable.KerasAutoTrackable
 |      tensorflow.python.trackable.autotrackable.AutoTrackable
 |      tensorflow.python.trackable.base.Trackable
 |      keras.src.ops.operation.Operation
 |      keras.src.saving.keras_saveable.KerasSaveable
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(
 |    self,
 |    factor,
 |    value_range=(0, 255),
 |    data_format=None,
 |    seed=None,
 |    **kwargs
 |  )
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  compute_output_shape(self, input_shape)
 |
 |  get_config(self)
 |      Returns the config of the object.
 |
 |      An object config is a Python dictionary (serializable)
 |      containing the information needed to re-instantiate it.
 |
 |  get_random_transformation(
 |    self,
 |    data,
 |    training=True,
 |    seed=None
 |  )
 |
 |  transform_bounding_boxes(
 |    self,
 |    bounding_boxes,
 |    transformation,
 |    training=True
 |  )
 |
 |  transform_images(
 |    self,
 |    images,
 |    transformation=None,
 |    training=True
 |  )
 |
 |  transform_labels(
 |    self,
 |    labels,
 |    transformation,
 |    training=True
 |  )
 |
 |  transform_segmentation_masks(
 |    self,
 |    segmentation_masks,
 |    transformation,
 |    training=True
 |  )
 |

