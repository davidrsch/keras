activations: Module(keras.api.activations)
applications: Module(keras.api.applications)
backend: Module(keras.api.backend)
callbacks: Module(keras.api.callbacks)
config: Module(keras.api.config)
constraints: Module(keras.api.constraints)
datasets: Module(keras.api.datasets)
device(device_name)
distribution: Module(keras.api.distribution)
dtype_policies: Module(keras.api.dtype_policies)
DTypePolicy(
  name,
  *args,
  **kwargs
)
export: Module(keras.api.export)
FloatDTypePolicy(name)
Function(
  inputs,
  outputs,
  name=None
)
Initializer()
initializers: Module(keras.api.initializers)
Input(
  shape=None,
  batch_size=None,
  dtype=None,
  sparse=None,
  batch_shape=None,
  name=None,
  tensor=None
)
InputSpec(
  dtype=None,
  shape=None,
  ndim=None,
  max_ndim=None,
  min_ndim=None,
  axes=None,
  allow_last_axis_squeeze=False,
  name=None
)
KerasTensor(
  shape,
  dtype='float32',
  sparse=False,
  record_history=True,
  name=None
)
Layer(*args, **kwargs)
layers: Module(keras.api.layers)
legacy: Module(keras.api.legacy)
Loss(
  name=None,
  reduction='sum_over_batch_size',
  dtype=None
)
losses: Module(keras.api.losses)
Metric(dtype=None, name=None)
metrics: Module(keras.api.metrics)
mixed_precision: Module(keras.api.mixed_precision)
Model(*args, **kwargs)
models: Module(keras.api.models)
name_scope(name, **kwargs)
Operation(*args, **kwargs)
ops: Module(keras.api.ops)
Optimizer(*args, **kwargs)
optimizers: Module(keras.api.optimizers)
preprocessing: Module(keras.api.preprocessing)
Quantizer(output_dtype='int8')
quantizers: Module(keras.api.quantizers)
random: Module(keras.api.random)
Regularizer()
regularizers: Module(keras.api.regularizers)
saving: Module(keras.api.saving)
Sequential(*args, **kwargs)
StatelessScope(
  state_mapping=None,
  collect_losses=False,
  initialize_variables=True
)
tree: Module(keras.api.tree)
utils: Module(keras.api.utils)
Variable(
  initializer,
  shape=None,
  dtype=None,
  trainable=True,
  autocast=True,
  aggregation='mean',
  name=None
)
version()

